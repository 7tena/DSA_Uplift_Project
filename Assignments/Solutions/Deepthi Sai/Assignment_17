//  Q1


#include<bits/stdc++.h>
using namespace std;

struct Job
{
char id;
int dead;
int profit; 
};


bool comparison(Job a, Job b)
{
	return (a.profit > b.profit);
}

vector<char>result; 
void JobScheduling(Job arr[], int n)
{
	sort(arr, arr+n, comparison);
	
	for(int i=0;i<n;i++)
	{
	    result.push_back('0');
	}
	bool slot[n]={false}; 

	for (int i=0; i<n; i++)
	{
	for (int j=min(n, arr[i].dead)-1; j>=0; j--)
	{
		if (slot[j]==false)
		{
			result[j] = arr[i].id; 
			slot[j] = true; 
			break;
		}
	}
	}
}


int main()
{
	Job arr[] = { {'a', 2, 100}, {'b', 1, 19}, {'c', 2, 27},
				{'d', 1, 25}, {'e', 3, 15}};
	int n = sizeof(arr)/sizeof(arr[0]);
	cout << "Following is maximum profit sequence of jobs \n";

	JobScheduling(arr, n);
	for(int i=0;i<result.size();i++)
	{
	    if(result[i]!='0')
	    cout<<result[i]<<endl;
	}
	return 0;
}


//Q2

int Solution::maxp3(vector<int> &A) {
    int n=A.size();
if(n<3) 
  return 0;
else if(n==3)  
  return A[0]*A[1]*A[2];
sort(A.begin(),A.end());
int maxp=A[0]*A[1]*A[n-1];
maxp=max(maxp,A[0]*A[1]*A[n-2]);
maxp=max(maxp,A[0]*A[1]*A[n-3]);
maxp=max(maxp,A[n-1]*A[n-2]*A[n-3]);
return maxp;
}

//Q3

int Solution::bulbs(vector<int> &A) {
int ans=0;
if(A.size()==0)return 0;
for(int i=1;i<A.size();i++){
    if(A[i-1]!=A[i]){
        ans++;
    }
}
if(A[0]==1)return ans;
return ans+1;
}

//Q4

vector<int> Solution::solve(vector<int> &A, int B) {
    int n=A.size();
    vector<int>temp(n+1);
    for(int i=0;i<n;i++)
    temp[A[i]]=i;
    long long int c=0;
    for(int i=0;i<n && c<B;i++)
    {
       if(A[i]!=(n-i))
       {
           temp[A[i]]=temp[n-i];
           swap(A[i],A[temp[n-i]]);
           c++;
       }
    }
    return A;
}


//Q5

bool c(const vector<int>&v1, const vector<int>&v2)
{
  return (v1[0]<v2[0]);
}
int Solution::solve(vector<vector<int> > &A) {
   sort(A.begin(),A.end(),c);
priority_queue<int,vector<int>,greater<int>> pq;
pq.push(A[0][1]);
for(int i=1;i<A.size();i++){
    int top = pq.top();
    if(A[i][0]>=top){
        pq.pop();
    }
    pq.push(A[i][1]);
}
return pq.size();
}

