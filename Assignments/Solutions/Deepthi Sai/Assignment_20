//Q1
class Solution {
public:
    int uniquePaths(int m, int n) 
    {
        int dp[m][n];
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i == 0 or j == 0)
                    dp[i][j]=1;
                else 
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        return dp[m-1][n-1];            
    }
};
//Q2

int phi(int n)
{
	float result = n;
	for(int p = 2; p * p <= n; ++p)
	{

		if (n % p == 0)
		{
			while (n % p == 0)
				n /= p;
				
			result *= (1.0 - (1.0 / (float)p));
		}
	}
	if (n > 1)
		result *= (1.0 - (1.0 / (float)n));

	return (int)result;
}


//Q3



int power(long long x, unsigned int y, int p)
{
	int res = 1;

	x = x % p; 

	if (x == 0) return 0; 
	
	while (y > 0)
	{
		if (y & 1)
			res = (res*x) % p;

		y = y>>1;
		x = (x*x) % p;
	}
	return res;
}


//Q4

class Solution {
public:
    bool prime(int n)
    {
        if(n==1)return false;
        if(n==2)return true;
        
        if(n%2==0)return false;
        
        for(int i=3;i<=sqrt(n);i++)
        {
            if(n%i==0)
                return false;
        }
        
        return true;
    }
   
  long long int reverse(int x){
        long long int ans=0;
        while(x)
        {
            ans=ans*10+x%10;
            x=x/10;
        }
        return ans;
    }
    
    bool palindrome(int x) {
        long long int y=reverse(x);
        if(y==x) return true;
        return false;
    } 
   
    
  /* bool palindrome(int n)
    {
        stack<int>s;
        queue<int>q;
        while(n>0)
        {
            s.push(n%10);
            q.push(n%10);
            n=n/10;
        }
        while(!s.empty())
        {
           if(s.top()!=q.front())
               return false;
            s.pop();
            q.pop();
        }
        return true;
    }*/
    
    int primePalindrome(int n) {
       if(n>=9989900)
           return 100030001;

        while(n)
        {
           if(palindrome(n) && prime(n))
               return n;
            n++;
        }
        
        return n;
    }
};


//Q5
class Solution {
public:
    int gcd(int a, int b)
    {
        if(b==0)return a;
        return  gcd(b,a%b);
    }
    
    string gcdOfStrings(string str1, string str2) {
    
        if(str1+str2!=str2+str1)
            return "";
        int g=gcd(str1.size(),str2.size());
        return str1.substr(0,g);
        
    }
};

//Q6

class Solution {
public:
    string getPermutation(int n, int k) {
        int arr[n];
        int i=0;
        while(i<n)
        {
           arr[i]=i+1; 
            i++;
        }
        i=1;
        while(i<k){
            next_permutation(arr,arr+n);
            i++;
        }
        string s="";
        for(int i=0;i<n;i++)
            s+=to_string(arr[i]);
        return s;
    }
};
