//Q2

#include<bits/stdc++.h>
using namespace std;
string findPrefix(string s1, string s2)
{
	string result;
	int n1 = s1.length(), n2 = s2.length();

	for (int i=0, j=0; i<=n1-1&&j<=n2-1; i++,j++)
	{
		if (s1[i] != s2[j])
			break;
		result.push_back(s1[i]);
	}
	return (result);
}


string commonPrefix(string arr[], int low, int high)
{
	if (low == high)
		return (arr[low]);

	if (high > low)
	{
		int mid = low + (high - low) / 2;
		string s1 = commonPrefix(arr, low, mid);
		string s2 = commonPrefix(arr, mid+1, high);

		return (findPrefix(s1, s2));
	}
}

int main()
{
	string arr[] = {"geeksforgeeks", "geeks",
					"geek", "geezer"};
	int n = sizeof (arr) / sizeof (arr[0]);

	string ans = commonPrefix(arr, 0, n-1);

	if (ans.length())
		cout << "The longest common prefix is "
			<< ans;
	else
		cout << "There is no common prefix";
	return (0);
}


//Q3


#include<bits/stdc++.h>
using namespace std;

int median(int arr[], int n)
{
	if (n%2 == 0)
		return (arr[n/2] + arr[n/2-1])/2;
	else
		return arr[n/2];
}

int getMedian(int ar1[], int ar2[], int n)
{
	if (n <= 0)
		return -1;
	if (n == 1)
		return (ar1[0] + ar2[0])/2;
	if (n == 2)
		return (max(ar1[0], ar2[0]) + min(ar1[1], ar2[1])) / 2;

	int m1 = median(ar1, n); 
	int m2 = median(ar2, n);

	if (m1 == m2)
		return m1;

	if (m1 < m2)
	{
		if (n % 2 == 0)
			return getMedian(ar1 + n/2 - 1, ar2, n - n/2 +1);
		return getMedian(ar1 + n/2, ar2, n - n/2);
	}

	if (n % 2 == 0)
		return getMedian(ar2 + n/2 - 1, ar1, n - n/2 + 1);
	return getMedian(ar2 + n/2, ar1, n - n/2);
}

int main()
{
	int ar1[] = {1, 2, 3, 6};
	int ar2[] = {4, 6, 8, 10};
	int n1 = sizeof(ar1)/sizeof(ar1[0]);
	int n2 = sizeof(ar2)/sizeof(ar2[0]);
	if (n1 == n2)
		printf("Median is %d", getMedian(ar1, ar2, n1));
	else
		printf("Doesn't work for arrays of unequal size");
	return 0;
}


//Q4

int power(int x, unsigned int y)
{
    if (y == 0)
        return 1;
    else if (y % 2 == 0)
        return power(x, y / 2) * power(x, y / 2);
    else
        return x * power(x, y / 2) * power(x, y / 2);
}
};


int power(int x, unsigned int y)
{
    int temp;
    if( y == 0)
        return 1;
    temp = power(x, y / 2);
    if (y % 2 == 0)
        return temp * temp;
    else{
         if(y>0) 
          return x * temp * temp;
        else 
          return  (temp * temp) /x;
        }
}



//Q5


#include <bits/stdc++.h>
using namespace std;

int floorSqrt(int x)
{
	if (x == 0 || x == 1)
		return x;

	int start = 1, end = x, ans;
	while (start <= end) {
		int mid = (start + end) / 2;

		if (mid * mid == x)
			return mid;

		if (mid <= x / mid) {
			start = mid + 1;
		    ans=mid;
		}
		else 
			end = mid - 1;
	}
	return ans;
}


int main()
{
	int x = 11;
	cout << floorSqrt(x) << endl;
	return 0;
}

